name: Back Merge
description: Merge code back into develop on push to main

inputs:
  src-branch:
    description: 'What branch is acting as the source of the merger'
    required: false
    default: 'main'
  dest-branch:
    description: 'What branch is acting as the destination of the merger'
    required: false
    default: ${{ github.event.repository.default_branch }}
  submodules:
    description: 'Whether to checkout submodules'
    required: false
    default: 'false'
  token:
    description: 'The token to access private repos'
    required: false
  commit-message:
    description: 'The commit message to use for the merge'
    required: false
  commit-author-name:
    description: 'The author name to use for the merge'
    required: false
    default: 'github-actions'
  commit-author-email:
    description: 'The email to use for the merge'
    required: false
    default: 'github-actions@github.com'
  commit-flags: 
    description: 'The git merge flags to use for the merge'
    required: false
    default: '--no-verify --strategy-option theirs --allow-unrelated-histories'

runs:
  using: 'composite'
  steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ inputs.token }}
        submodules: ${{ inputs.submodules }}
    - name: Source Branch
      id: src-branch
      run: |
        if [ -n "${{ inputs.src-branch }}" ]; then
          echo "branch=${{ inputs.src-branch }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" = "push" ]; then
          echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        else
          echo "branch=main" >> $GITHUB_OUTPUT
        fi
      shell: bash
    - name: Commit Message
      id: message
      run: |
        if [ -n "${{ inputs.commit-message }}" ]; then
          echo "message=$(echo ${{ inputs.commit-message }} | sed 's|\"|\\\"|g')" >> $GITHUB_OUTPUT
        else
          echo "message=Merge branch '${{ steps.src-branch.outputs.branch }}' into '${{ inputs.dest-branch }}'" >> $GITHUB_OUTPUT
        fi
      shell: bash
    - name: Clean submodules
      if: inputs.submodules == 'true'
      run: |
        git submodule foreach --recursive 'git reset --hard'
        git submodule foreach --recursive 'git clean -fdx'
      shell: bash
    - name: Merge
      run: |
        git config user.email ${{ inputs.commit-author-email }}
        git config user.name ${{ inputs.commit-author-name }}
        git fetch
        # Ensure the branch exists locally
        git switch ${{ steps.src-branch.outputs.branch }}
        git pull
        git switch ${{ inputs.dest-branch }}
        git pull
        git merge ${{ steps.src-branch.outputs.branch }} -m "${{ steps.message.outputs.message }}" ${{ inputs.commit-flags }} || echo "Skipping merge"
        git push
      shell: bash
